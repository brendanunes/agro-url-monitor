name: URL Monitor & Pages

on:
  schedule:
    - cron: "*/30 * * * *"
  workflow_dispatch: {}
  push:
    branches: ["main"]

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  monitor:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install deps
        run: npm ci

      # Roda Cypress; se falhar, os próximos steps ainda rodam por causa do `if: always()`
      - name: Run Cypress (headless)
        run: npm run monitor

      - name: Commit history and dashboard
        if: always()
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(monitor): update history.csv"
          file_pattern: |
            dashboard/history.csv
            dashboard/index.html
            urls/*.json

      # 🔔 Notificar o Teams com o resumo do último run
      - name: Notify Microsoft Teams
        if: always()
        env:
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
        run: |
          node - <<'NODE'
          const fs = require('fs');
          const https = require('https');
          const urlmod = require('url');

          const hook = process.env.TEAMS_WEBHOOK_URL;
          if (!hook) { console.error('Missing TEAMS_WEBHOOK_URL'); process.exit(1); }

          // espelhe os status "OK" do cypress.config.js, se mudar lá, mude aqui
          const OK = new Set([200,201,202,204,301,302,303,304,307,308]);

          const csv = fs.readFileSync('dashboard/history.csv','utf8').trim().split(/\r?\n/);
          if (csv.length < 2) {
            console.log('No data in history.csv yet.');
            process.exit(0);
          }
          csv.shift(); // header
          const rows = csv.map(l => {
            const [timestamp,url,status,duration_ms,group] = l.split(',');
            return { timestamp, url, status:+status, duration_ms:+duration_ms, group };
          });
          const lastTs = rows[rows.length-1].timestamp;
          const batch = rows.filter(r => r.timestamp === lastTs);
          const down = batch.filter(r => !OK.has(r.status));

          const title = down.length
            ? `⚠️ ${down.length}/${batch.length} URLs DOWN`
            : `✅ ${batch.length} URLs OK`;
          const list = down.slice(0, 12).map(r => `• ${r.status} – ${r.url}`).join('\\n');

          const body = {
            text: `${title}\n${list ? list + '\n' : ''}\nDashboard: https://brendanunes.github.io/agro-url-monitor/`
          };

          const u = urlmod.parse(hook);
          const data = Buffer.from(JSON.stringify(body));
          const opts = {
            method: 'POST',
            hostname: u.hostname,
            path: u.path,
            headers: {'Content-Type':'application/json','Content-Length':data.length}
          };
          const req = https.request(opts, res => {
            console.log('Teams response:', res.statusCode);
            res.resume();
          });
          req.on('error', e => { console.error('Teams error', e); process.exit(1); });
          req.write(data); req.end();
          NODE

      - name: Upload pages artifact
        if: always()
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dashboard

  deploy:
    if: always()
    needs: monitor
    environment:
      name: github-pages
      url: ${{ steps.deploy.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deploy
        uses: actions/deploy-pages@v4
